name: Lighthouse
on:
  pull_request:
    branches:
      - main 
    types:
      - opened
  push:
    branches:
      - main
  workflow_dispatch:
permissions: write-all
jobs:
  create-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
      
      - name: Set up node 
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm install

      - name: Build site
        run: npm run build

      - name: Run Lighthouse against a static dist dir
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          # no urls needed, since it uses local folder to scan .html files
          configPath: './lighthouserc.json'
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v5
        with:
          script: |
            const lighthouseCommentMaker = require('./.github/workflows/lighthouseCommentMaker.js');

            const lighthouseOutputs = {
              manifest: ${{ steps.lighthouse_audit.outputs.manifest }},
              links: ${{ steps.lighthouse_audit.outputs.links }}
            };

            const comment = lighthouseCommentMaker({ lighthouseOutputs });
            core.setOutput("comment", comment);

      - name: Add Lighthouse stats as comment
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comment }}

      - name: Create latest results json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "lighthouse-latest.json"
          json: ${{ steps.lighthouse_audit.outputs.manifest.summary }}
          dir: './.github/lighthouse-results'

      - name: Commit
        uses: stefanzweifel/git-auto-commit-action@v4
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          commit_message: Add updated lighthouse results file
      
      # - name: Commit
      #   uses: EndBug/add-and-commit@v9
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     add: './.github/workflows/lighthouse-latest.json'
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # - run: echo  ${{ steps.lighthouse_audit.outputs.manifest.summary }} > lighthouse-latest.json

      # - name: Commit latest lighthouse results
      #   uses: actions/upload-artifact@v3
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     name: lighthouse-latest
      #     path: lighthouse-latest.json

  # print-results:
  #     - name: Download lighthouse artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: lighthouse-results

  #     - shell: bash
  #       run: |
  #         value=`cat lhr-*.json`

  #     - name: Create Pull Request comment
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         script: |
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: 'ðŸ‘‹ Thanks for reporting!'
  #           })